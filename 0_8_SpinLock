class SpinLock // Lock이 풀릴 때 까지 돌아가는 존버메타

    {
        volatile bool _locked = false;

        public void Acquire()
        {         

        }

        public void Release()
        {
        
        }
    }

    class Program
    {
            

        static int number = 0;
        static SpinLock _lock = new SpinLock(); 

        static void Thread_1()
        {
            for(int i=0; i<10000; i++)
            {
                _lock.Acquire();

                number++;

                _lock.Release();
            }
        }

        static void Thread_2()
        {

            for (int i=0; i<10000; i++)
            {
                _lock.Acquire();

                number--;

                _lock.Release();
            }
        }

        static void Main(string[] args)
        {
            Task t1 = new Task(Thread_1);
            Task t2 = new Task(Thread_2);

            t1.Start();
            t2.Start();

            Task.WaitAll(t1, t2);

            Console.WriteLine(number);

        }
    }
